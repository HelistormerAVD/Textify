import bpy
import math
import os

points = 4

# Pfad zum Speichern der gerenderten Bilder
output_path = bpy.path.abspath("//renders/")
if not os.path.exists(output_path):
    os.makedirs(output_path)

# Kamera-Objekt abrufen
camera = bpy.data.objects.get("Camera")
light = bpy.data.objects.get("Kamera_light")
if camera is None:
    raise ValueError("Keine Kamera mit dem Namen 'Camera' gefunden. Stelle sicher, dass eine Kamera existiert.")
if light is None:
    raise ValueError("Kein Licht mit dem Namen 'Kamera_licht' gefunden. Stelle sicher, dass ein Kamera_licht existiert.")

camX = camera.location.x
camY = camera.location.y
camZ = camera.location.z


# Anzahl der Schritte (8 * 45° = 360°)
steps = 8
k = 30
hori_angle = 60
angle_step = math.radians(45)  # 45 Grad in Radian umwandeln
angle_hori = math.radians(30)

for k in range(points):
    obj_name = f"Empty.{k:03d}"
    point = bpy.data.objects.get(obj_name)
    if point is None:
        raise ValueError("Punkt Existiert nicht!")
     
    active_render_point_X = point.location.x
    active_render_point_Y = point.location.y
    active_render_point_Z = point.location.z
    
    camera.location.x = active_render_point_X
    camera.location.y = active_render_point_Y
    camera.location.z = active_render_point_Z
    
    # Ursprüngliche Rotation speichern
    initial_rotation = camera.rotation_euler.z
    initial_light_rotation = light.rotation_euler.z
    initial_rot_x = camera.rotation_euler.x
    initial_light_rot_x = light.rotation_euler.x

    camera.rotation_euler.x = initial_rot_x - angle_hori
    light.rotation_euler.x = initial_light_rot_x - angle_hori


    for j in range(3):
        for i in range(steps):
            # Kamera drehen
            camera.rotation_euler.z = initial_rotation + (i * angle_step)
            light.rotation_euler.z = initial_light_rotation + (i * angle_step)
            
            # Rendern
            if j == 0:
                bpy.context.scene.render.filepath = os.path.join(output_path, f"render_{k:03d}_{i:03d}_D.png")
            elif j == 1:
                bpy.context.scene.render.filepath = os.path.join(output_path, f"render_{k:03d}_{i:03d}_N.png")
            elif j == 2:
                bpy.context.scene.render.filepath = os.path.join(output_path, f"render_{k:03d}_{i:03d}_U.png")
            else:
                bpy.context.scene.render.filepath = os.path.join(output_path, f"render_{k:03d}_{i:03d}_ERROR.png")
            bpy.ops.render.render(write_still=True)
        
            print(f"Bild {i+1}/{steps} gespeichert: {bpy.context.scene.render.filepath}")
            
        camera.rotation_euler.x = initial_rot_x + (j * angle_hori)
        light.rotation_euler.x = initial_light_rot_x + (j * angle_hori)
        

    # Kamera zurücksetzen
    
    camera.location.x = camX
    camera.location.y = camY
    camera.location.z = camZ
    
    camera.rotation_euler.z = initial_rotation
    light.rotation_euler.z = initial_light_rotation
    camera.rotation_euler.x = initial_rot_x
    light.rotation_euler.x = initial_light_rot_x

print("Fertig! Kamera zurückgesetzt.")
